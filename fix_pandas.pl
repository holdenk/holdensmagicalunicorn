#!/usr/bin/perl -s
$| = 1;
use LWP::UserAgent;
use Net::Twitter;
use Pithub;
use Data::Dumper;

use strict;
use Unicorn::Wordlist qw{fix_text check_common};
use Unicorn::Errorcheck qw{check_php fix_php check_py fix_py check_go fix_go check_cpp fix_cpp check_shell fix_shell};
use Unicorn::Blacklist qw{ ok_to_update };
use Unicorn::Settings qw{ settings };

require "shared_fix.pl";

my $p = Pithub->new;

my $c = 0;
my $settings = settings();
my $consumer_key = $settings->{"twitter.consumer_key"};
my $consumer_secret = $settings->{"twitter.consumer_secret"};
my $user = $settings->{"github.user"};
my $token = $settings->{"github.token"};
my $mode = $settings->{"mode"};
print "using ck $consumer_key / secret $consumer_secret\n";
my $nt = Net::Twitter->new(
    traits   => [qw/OAuth API::REST/],
    consumer_key        => $consumer_key,
    consumer_secret     => $consumer_secret,
);
$nt->access_token();
$nt->access_token_secret();

my $ua = new LWP::UserAgent;
print "Hello!\n";
print "Connecting to github!\n";
my $u = Pithub::Users->new( token => $token );
my $result = $u->get;
my $url_out;
open ($url_out, ">>review_urls");
print "Reading input\n";

while (my $l = <>) {
    if ($l =~ /github\.com\/(.*?)\s*$/) {
        print "Checking $1\n";
        my $url = "https://www.github.com/".$1;
        $url =~ s/raw\/.*?\//raw\/master\//;
        handle_url($url);
    } else {
        print "fuck $l\n";
    }
}
close ($url_out);

sub handle_url {
    my $url = shift @_;
    print "looking at $url\n";
    if ($url =~ /http.*\/.*github\.com\/(.*?)\/(.*?)(\/|$).*/) {
        my $ruser = $1;
        my $repo = $2;
        my $result = $p->repos->get( user => $ruser , repo => $repo);
        my $traverse = 0;
        #Do we need to go up a level?
        while ($traverse < 10 && $result->content->{source}) {
            my $above = $result->content->{source}->{url};
            print "Yup, source exists was pulled from $above\n";
            if ($above =~ /repos\/(.*?)\/(.*)$/) {
                $ruser = $1;
                $repo = $2;
            }
            $result = $p->repos->get( user => $ruser , repo => $repo);
            $traverse++;
        }
        if (!ok_to_update($ruser)) {
            #Fuck no love
            return 0;
        }
        #Ok dokey lets try and fork this business
        print "trying to fork repo $repo from $ruser\n";
        my $f = Pithub::Repos::Forks->new(token => $token);
        my $result = $f->create( user => $ruser, repo => $repo) or die "Forking failed $!\n";
        my $clone_url = $result->content->{ssh_url};
        my $upstream_url = $result->content->{parent}->{ssh_url};
        my $master_branch = $result->content->{parent}->{master_branch} || "master";
        print "using master branch: $master_branch\n";
	if (!$clone_url) {
	    print "Error, no clone url\n";
	    print Dumper($result);
	    next;
	}
        #Oh hey lets merge the latest business to eh (just in case we have an old fork)
        print `rm -rf foo && mkdir -p foo && cd foo && git clone "$clone_url" && cd * && git remote add upstream "$upstream_url" && git fetch upstream && git merge upstream/$master_branch && git push`;
        print "Did the sexy bit!\n";
        #Get the files
        my @all_files;
        open (my $files,"find ./foo/|");
        while (my $file = <$files>) {
            chomp ($file);
            push @all_files, $file;
        }
        close ($files);
        #Now we iterate through each of the processors so the git commit messages are grouped logically
        print "handling the files\n";
        my @changes = handle_files(@all_files);
	`cd foo && cd * && git push`;
        #Did we change anything?
        if ($#changes > 0) {
	    # Yes!
	    # Push without review or require human review?
	    my $pull_msg = generate_pull_msg($ruser, $repo, @changes);
	    my $twitter_msg = generate_twitter_msg(@changes);
	    if ($mode eq "autopush") {
		#Make pull
		my $pu = Pithub::PullRequests->new(user => $user ,token => $token);
		my $result = $pu->create(user => $ruser,
					 repo => $repo,
					 data => {
					     title => "Pull request to a fix things",
					     body => $pull_msg,
					     base => $master_branch,
					     head => "$user:".$master_branch});
		my $link = $result->content->{_links}->{html}->{href};
		#Post to twitter
		$twitter_msg =~ s/\[LINK\]$/$link/;
		$nt->update($twitter_msg);
	    } else {
		# Fetch the upstream so we can generate a diff against it for the reviewer
		`cd foo; cd *;git push;git fetch upstream master;git branch upstream_master upstream/master;git push origin upstream_master`;
		my $review_url = "https://github.com/$user/$repo/compare/upstream_masterâ€¦master";
		print "review url $review_url\n";
		print $url_out "$review_url,$pull_msg,$twitter_msg,$ruser\n";
	    }
        }
    }
}
sub generate_pull_msg {
    my @msgs = @_;
    my $msg_txt = join(' ',@msgs);
    my $pull_msg = "Fix ".$msg_txt." these changes are automagically generated by https://github.com/holdenk/holdensmagicalunicorn";
    return $pull_msg;
}
sub generate_twitter_msg {
    my ($ruser, $pname,@msgs) = @_;
    my $msgs_txt = join(' ',@msgs);
    my $message = "Fixing: ".$msgs_txt." in ".$ruser.":".$pname." see pull request [LINK]";
    if (length($message) > 120) {
	$message = "Fixing: ".$msgs_txt." in ".$pname." see pull request [LINK]";
    }
    if (length($message) > 120) {
        $message =  "Fixing: ".$msgs_txt." in ".$pname." see [LINK]";
    }
    if (length($message) > 120) {
        $message = "Fixing ".$msgs_txt." in ".$pname." see [LINK]";
    }
    if (length($message) > 120) {
        $message = "Update to ".$pname." see pull request [LINK]";
    }
    if (length($message) > 120) {
	$message = "New pull request [LINK] omnomnom :)";
    }
    # Special case for the warmup
    if ($ruser =~ /holdenkarau/) {
	$message = "Warming up:".$message;
    }
    return $message;
}
